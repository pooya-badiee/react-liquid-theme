import { PassThrough } from 'node:stream'
import liquidPlugin from '@shopify/prettier-plugin-liquid/standalone.js'
import * as prettier from 'prettier'
import type { ReactNode } from 'react'
import { renderToPipeableStream } from 'react-dom/server'
import { DECODE_END_SIGN, DECODE_START_SIGN } from '../liquid-react/components/html-decoder/constants'
import { decodeHtml } from '../liquid-react/components/html-decoder/decode-html'

const HEADER_COMMENT = `
{%- comment -%}
  ------------------------------------------------------------------
  ⚠️  AUTO-GENERATED — DO NOT EDIT
  ------------------------------------------------------------------

  Generated by Liquid Builder. Changes will be overwritten.
  Modify source files instead.

  ------------------------------------------------------------------
{%- endcomment -%}
`

export async function renderToString(
  reactNode: ReactNode,
  { leaveComment = false }: { leaveComment?: boolean } = {},
): Promise<string> {
  return await new Promise<string>((resolve, reject) => {
    const stream = new PassThrough()
    let html = ''

    stream.setEncoding('utf8')
    stream.on('data', (chunk: string) => {
      // removes dead html comments
      html += removeTrashComments(chunk)
    })
    stream.on('end', async () => {
      html = decodeHtml(html, DECODE_START_SIGN, DECODE_END_SIGN)
      html = await prettier.format((leaveComment ? HEADER_COMMENT : '') + html, {
        parser: 'liquid-html',
        plugins: [liquidPlugin],
        printWidth: 120,
        tabWidth: 2,
        singleQuote: true,
        trailingComma: 'all',
        htmlWhitespaceSensitivity: 'ignore',
      })
      resolve(html)
    })
    stream.on('error', reject)

    const { pipe } = renderToPipeableStream(reactNode, {
      onAllReady() {
        pipe(stream)
      },
      onError(error) {
        console.error('Render error:', error)
      },
    })
  })
}

export function removeTrashComments(html: string): string {
  return html.replace(/<!--\s*-->|\\x3C!--\s*-->/g, '')
}
